def secrets = [
        [path: 'secret/COMMON', 
        engineVersion: 2, 
        secretValues: [
            [envVar: 'GIT_CRED', vaultKey: 'GIT_CRED'],
            [envVar: 'GIT_URL', vaultKey: 'GIT_URL'],
            [envVar: 'SERVER_URL', vaultKey: 'SERVER_URL']
        ]],
        [path: 'secret/ETC_MORDOR_SIGNER', 
        engineVersion: 2, 
        secretValues: [ 
            [envVar:   "WEB3SIGNER_OPTIONS", vaultKey:    "WEB3SIGNER_OPTIONS"],
            [envVar:   "WEB3SIGNER_IMAGE", vaultKey:    "WEB3SIGNER_IMAGE"],
            [envVar:   "WEB3SIGNER_HTTP_LISTEN_HOST", vaultKey:    "WEB3SIGNER_HTTP_LISTEN_HOST"],
            [envVar:   "WEB3SIGNER_HTTP_LISTEN_PORT", vaultKey:    "WEB3SIGNER_HTTP_LISTEN_PORT"],
            [envVar:   "WEB3SIGNER_HTTP_HOST_ALLOWLIST", vaultKey:    "WEB3SIGNER_HTTP_HOST_ALLOWLIST"],
            [envVar:   "WEB3SIGNER_IDLE_CONNECTION_TIMEOUT_SECONDS", vaultKey:    "WEB3SIGNER_IDLE_CONNECTION_TIMEOUT_SECONDS"],
            [envVar:   "WEB3SIGNER_METRICS_ENABLED", vaultKey:    "WEB3SIGNER_METRICS_ENABLED"],
            [envVar:   "WEB3SIGNER_METRICS_HOST", vaultKey:    "WEB3SIGNER_METRICS_HOST"],
            [envVar:   "WEB3SIGNER_METRICS_PORT", vaultKey:    "WEB3SIGNER_METRICS_PORT"],
            [envVar:   "WEB3SIGNER_METRICS_CATEGORY", vaultKey:    "WEB3SIGNER_METRICS_CATEGORY"],
            [envVar:   "WEB3SIGNER_METRICS_HOST_ALLOWLIST" , vaultKey:    "WEB3SIGNER_METRICS_HOST_ALLOWLIST"] ,
            [envVar:   "WEB3SIGNER_SWAGGER-UI_ENABLED", vaultKey:    "WEB3SIGNER_SWAGGER-UI_ENABLED"],
            [envVar:   "WEB3SIGNER_TLS_KEYSTORE_FILE", vaultKey:    "WEB3SIGNER_TLS_KEYSTORE_FILE"],
            [envVar:   "WEB3SIGNER_TLS_ALLOW_ANY_CLIENT", vaultKey:    "WEB3SIGNER_TLS_ALLOW_ANY_CLIENT"],
            [envVar:   "WEB3SIGNER_TLS_KNOWN_CLIENTS_FILE", vaultKey:    "WEB3SIGNER_TLS_KNOWN_CLIENTS_FILE"],
            [envVar:   "WEB3SIGNER_TLS_ALLOW_CA_CLIENTS", vaultKey:    "WEB3SIGNER_TLS_ALLOW_CA_CLIENTS"],
            [envVar:   "WEB3SIGNER_VERTX_WORKER_POOL_SIZE", vaultKey:    "WEB3SIGNER_VERTX_WORKER_POOL_SIZE"],
            [envVar:   "WEB3SIGNER_ETH1_DOWNSTREAM_HTTP_HOST", vaultKey:    "WEB3SIGNER_ETH1_DOWNSTREAM_HTTP_HOST"],
            [envVar:   "WEB3SIGNER_ETH1_DOWNSTREAM_HTTP_PATH", vaultKey:    "WEB3SIGNER_ETH1_DOWNSTREAM_HTTP_PATH"],
            [envVar:   "WEB3SIGNER_ETH1_DOWNSTREAM_HTTP_PORT", vaultKey:    "WEB3SIGNER_ETH1_DOWNSTREAM_HTTP_PORT"],
            [envVar:   "WEB3SIGNER_ETH1_DOWNSTREAM_HTTP_PROXY_HOST", vaultKey:    "WEB3SIGNER_ETH1_DOWNSTREAM_HTTP_PROXY_HOST"],
            [envVar:   "WEB3SIGNER_ETH1_DOWNSTREAM_HTTP_PROXY_PORT", vaultKey:    "WEB3SIGNER_ETH1_DOWNSTREAM_HTTP_PROXY_PORT"],
            [envVar:   "WEB3SIGNER_ETH1_DOWNSTREAM_HTTP_PROXY_USERNAME", vaultKey:    "WEB3SIGNER_ETH1_DOWNSTREAM_HTTP_PROXY_USERNAME"],
            [envVar:   "WEB3SIGNER_ETH1_DOWNSTREAM_HTTP_PROXY_PASSWORD", vaultKey:    "WEB3SIGNER_ETH1_DOWNSTREAM_HTTP_PROXY_PASSWORD"],
            [envVar:   "WEB3SIGNER_ETH1_DOWNSTREAM_HTTP_REQUEST_TIMEOUT", vaultKey:    "WEB3SIGNER_ETH1_DOWNSTREAM_HTTP_REQUEST_TIMEOUT"],
            [envVar:   "WEB3SIGNER_ETH1_DOWNSTREAM_HTTP_TLS_ENABLED", vaultKey:    "WEB3SIGNER_ETH1_DOWNSTREAM_HTTP_TLS_ENABLED"],
            [envVar:   "WEB3SIGNER_DOWNSTREAM_HTTP_TLS_KNOWN_SERVERS_FILE", vaultKey:    "WEB3SIGNER_DOWNSTREAM_HTTP_TLS_KNOWN_SERVERS_FILE"],
            [envVar:   "WEB3SIGNER_ETH1_HTTP_TLS_CA_AUTH_ENABLED", vaultKey:    "WEB3SIGNER_ETH1_HTTP_TLS_CA_AUTH_ENABLED"],
            [envVar:   "WEB3SIGNER_ETH1_KEYSTORES_PASSWORD_FILE", vaultKey:    "WEB3SIGNER_ETH1_KEYSTORES_PASSWORD_FILE"],
            [envVar:   "WEB3SIGNER_ETH1_KEYSTORES_PASSWORDS_PATH", vaultKey:    "WEB3SIGNER_ETH1_KEYSTORES_PASSWORDS_PATH"],
            [envVar:   "WEB3SIGNER_ETH1_KEYSTORES_PATH", vaultKey:    "WEB3SIGNER_ETH1_KEYSTORES_PATH"],
            [envVar:   "WEB3SIGNER_ETH1_CHAIN_ID", vaultKey: "WEB3SIGNER_ETH1_CHAIN_ID"],
        ]]
    ]


pipeline {
    agent any
 
    stages {

        stage(' Purge') {
            steps{
                withVault([vaultSecrets: secrets]) {
                    sh """
                        cd packages/compose/web3signer/
                        docker stack rm ${env.JOB_NAME}_CLUSTER  || echo "No service running"
                    """
                    
                }
            }
        }
    
        stage('Rest') {
            steps{
                sh 'sleep 10'
            }
        }
        
        stage('Boot') {
    	   steps{
    	        withVault([vaultSecrets: secrets]) {
                    sh """
    	                cd packages/compose/web3signer/
    	                docker stack deploy -c docker-compose.eth1.yml ${env.JOB_NAME}_CLUSTER
    	            """
    	       }
    	    }
        }
    }//STAGES

    post {
    changed {
        withCredentials([string(credentialsId: 'discord_webhook', variable: 'WEBHOOK')]) {
            discordSend description: 'Jenkins Pipeline Build', 
            link: BUILD_URL, 
            successful: currentBuild.resultIsBetterOrEqualTo('SUCCESS'), 
            title: JOB_NAME, 
            webhookURL: WEBHOOK
            }
        }
    } //POST

} //PIPELINE

