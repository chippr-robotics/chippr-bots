def secrets = [
        [path: 'secret/COMMON', engineVersion: 2, secretValues: [
            [envVar: 'GIT_CRED', vaultKey: 'GIT_CRED'],
            [envVar: 'GIT_URL', vaultKey: 'GIT_URL'],
            [envVar: 'SERVER_URL', vaultKey: 'SERVER_URL']
            ]],
        [path: 'secret/MASTODON', engineVersion: 2, secretValues: [ 
            [envVar: 'POSTGRES_IMAGE', vaultKey: 'POSTGRES_IMAGE'],
            [envVar: 'POSTGRES_VOLUME', vaultKey: 'POSTGRES_VOLUME'],
            [envVar: 'REDIS_IMAGE', vaultKey: 'REDIS_IMAGE'],
            [envVar: 'REDIS_VOLUME', vaultKey: 'REDIS_VOLUME'],
            [envVar: 'MASTODON_IMAGE', vaultKey: 'MASTODON_IMAGE'],
            [envVar: 'MASTODON_SYSTEM_VOLUME', vaultKey: 'MASTODON_SYSTEM_VOLUME'],
            [envVar: 'LOCAL_DOMAIN', vaultKey: 'LOCAL_DOMAIN'],
            [envVar: 'REDIS_HOST', vaultKey: 'REDIS_HOST'],
            [envVar: 'REDIS_PORT', vaultKey: 'REDIS_PORT'],
            [envVar: 'DB_HOST', vaultKey: 'DB_HOST'],
            [envVar: 'DB_USER', vaultKey: 'DB_USER'],
            [envVar: 'DB_NAME', vaultKey: 'DB_NAME'],
            [envVar: 'DB_PASS', vaultKey: 'DB_PASS'],
            [envVar: 'DB_PORT', vaultKey: 'DB_PORT'],
            [envVar: 'ES_ENABLED', vaultKey: 'ES_ENABLED'],
            [envVar: 'ES_HOST', vaultKey: 'ES_HOST'],
            [envVar: 'ES_PORT', vaultKey: 'ES_PORT'],
            [envVar: 'ES_USER', vaultKey: 'ES_USER'],
            [envVar: 'ES_PASS', vaultKey: 'ES_PASS'],
            [envVar: 'SECRET_KEY_BASE', vaultKey: 'SECRET_KEY_BASE'],
            [envVar: 'OTP_SECRET', vaultKey: 'OTP_SECRET'],
            [envVar: 'VAPID_PRIVATE_KEY', vaultKey: 'VAPID_PRIVATE_KEY'],
            [envVar: 'VAPID_PUBLIC_KEY', vaultKey: 'VAPID_PUBLIC_KEY'],
            [envVar: 'SMTP_SERVER', vaultKey: 'SMTP_SERVER'],
            [envVar: 'SMTP_PORT', vaultKey: 'SMTP_PORT'],
            [envVar: 'SMTP_LOGIN', vaultKey: 'SMTP_LOGIN'],
            [envVar: 'SMTP_PASSWORD', vaultKey: 'SMTP_PASSWORD'],
            [envVar: 'SMTP_FROM_ADDRESS', vaultKey: 'SMTP_FROM_ADDRESS'],
            [envVar: 'S3_ENABLED', vaultKey: 'S3_ENABLED'],
            [envVar: 'S3_BUCKET', vaultKey: 'S3_BUCKET'],
            [envVar: 'AWS_ACCESS_KEY_ID', vaultKey: 'AWS_ACCESS_KEY_ID'],
            [envVar: 'AWS_SECRET_ACCESS_KEY', vaultKey: 'AWS_SECRET_ACCESS_KEY'],
            [envVar: 'S3_ALIAS_HOST', vaultKey: 'S3_ALIAS_HOST'],
            [envVar: 'IP_RETENTION_PERIOD', vaultKey: 'IP_RETENTION_PERIOD'],
            [envVar: 'SESSION_RETENTION_PERIOD', vaultKey: 'SESSION_RETENTION_PERIOD'],

        ]]
    ]
def configuration = [vaultUrl: 'http://192.168.1.135:8200',
                         vaultCredentialId: 'vault-token',
                         engineVersion: 2]
    

pipeline {
    agent any
  
    stages {
        stage('Mastodon - Checkout') {
            steps {
    	    withVault([configuration: configuration, vaultSecrets: secrets]) {
    	        checkout([
                    $class: 'GitSCM', 
                    branches: 
                        [[name: 'refs/heads/primary']],
                        doGenerateSubmoduleConfigurations: 
                            false,
                            extensions: [[$class: 'CloneOption', timeout: 120]], 
                            submoduleCfg: [],
                            userRemoteConfigs: 
                                [[
                                    credentialsId: env.GIT_CRED, 
                                    url: env.GIT_URL
                                ]]
                ]) 
            }}
        }

        stage('Mastodon - Build') {
            steps {
        	    withVault([configuration: configuration, vaultSecrets: secrets]) {
                    sh 'docker pull $NEO4J_IMAGE'
        	    }
            }
    	}

        stage('Mastodon - Purge') {
            steps{
                withVault([configuration: configuration, vaultSecrets: secrets]) {
                    sh """
                        cd packages/compose/mastodon/
                        docker stack rm MASTODON_CLUSTER  || echo "No service running"
                    """
                    
                }
            }
        }
    
        stage('Mastodon - Rest') {
            steps{
                sh 'sleep 10'
            }
        }
        
        stage('Mastodon - Boot') {
    	   steps{
    	        withVault([configuration: configuration, vaultSecrets: secrets]) {
                    sh """
    	                cd packages/compose/mastodon/
    	                docker stack deploy -c docker-compose.yml MASTODON_CLUSTER
    	            """
    	       }
    	    }
        }
    }//STAGES
    post {
    changed {
        withCredentials([string(credentialsId: 'discord_webhook', variable: 'WEBHOOK')]) {
            discordSend description: 'Jenkins Pipeline Build', 
            link: BUILD_URL, 
            successful: currentBuild.resultIsBetterOrEqualTo('SUCCESS'), 
            title: JOB_NAME, 
            webhookURL: WEBHOOK
        }
    }
} //POST

} //PIPELINE

