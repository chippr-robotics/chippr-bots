{
  "contractName": "IERC2612",
  "abi": [
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/interfaces/draft-IERC2612.sol\":\"IERC2612\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"project:/contracts/interfaces/draft-IERC2612.sol\":{\"keccak256\":\"0xa211fc40e000ce8ebc049a2eef1386867ed6b0727b8886e1054e8cd81c4db805\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://120cbf91ee7671f7c51b2ec2d4f0003955ae53fd9fe9262564c8671c87b9dbe8\",\"dweb:/ipfs/QmfTK3oqpnHUnPFNAX3ucPH9fFnhZAXG23EMqSEtDusbjD\"]},\"project:/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0x3aab711a5f9a5a5a394191e928cc8258e8a243e855bb0275e7834f9686383277\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40922d7e97d4f43fe30f418bd9e2b95495c9b1caf6df30c87a1df4fd82a1330d\",\"dweb:/ipfs/QmZocr8f8MKrLWkmuhBfrb9Ls5eeQ5CoUpA64uGAxAZoLL\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/extensions/draft-IERC20Permit.sol\";\n\ninterface IERC2612 is IERC20Permit {}\n",
  "sourcePath": "C:\\Users\\cody.burns\\Documents\\github\\generative-art-node\\contracts\\interfaces\\draft-IERC2612.sol",
  "ast": {
    "absolutePath": "project:/contracts/interfaces/draft-IERC2612.sol",
    "exportedSymbols": {
      "IERC20Permit": [
        12470
      ],
      "IERC2612": [
        6758
      ]
    },
    "id": 6759,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6754,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:166"
      },
      {
        "absolutePath": "project:/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
        "file": "../token/ERC20/extensions/draft-IERC20Permit.sol",
        "id": 6755,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 6759,
        "sourceUnit": 12471,
        "src": "58:58:166",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 6756,
              "name": "IERC20Permit",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 12470,
              "src": "140:12:166"
            },
            "id": 6757,
            "nodeType": "InheritanceSpecifier",
            "src": "140:12:166"
          }
        ],
        "contractDependencies": [
          12470
        ],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 6758,
        "linearizedBaseContracts": [
          6758,
          12470
        ],
        "name": "IERC2612",
        "nameLocation": "128:8:166",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 6759,
        "src": "118:37:166"
      }
    ],
    "src": "33:123:166"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/interfaces/draft-IERC2612.sol",
    "exportedSymbols": {
      "IERC20Permit": [
        12470
      ],
      "IERC2612": [
        6758
      ]
    },
    "id": 6759,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6754,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:166"
      },
      {
        "absolutePath": "project:/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
        "file": "../token/ERC20/extensions/draft-IERC20Permit.sol",
        "id": 6755,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 6759,
        "sourceUnit": 12471,
        "src": "58:58:166",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 6756,
              "name": "IERC20Permit",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 12470,
              "src": "140:12:166"
            },
            "id": 6757,
            "nodeType": "InheritanceSpecifier",
            "src": "140:12:166"
          }
        ],
        "contractDependencies": [
          12470
        ],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 6758,
        "linearizedBaseContracts": [
          6758,
          12470
        ],
        "name": "IERC2612",
        "nameLocation": "128:8:166",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 6759,
        "src": "118:37:166"
      }
    ],
    "src": "33:123:166"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.2+commit.661d1103.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2021-09-10T01:36:35.320Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
      },
      "nonces(address)": {
        "details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}